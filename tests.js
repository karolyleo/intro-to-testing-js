// Unit tests for the helloWorld functiondescribe('helloWorld', function() {    it('should be a defined function', function() {      expect(typeof helloWorld).toBe('function');    });    it('should return a string when called', function() {      expect(typeof helloWorld()).toBe("string");    });    it('should return the string "Hello, World!" when executed', function() {      expect(helloWorld()).toBe("Hello, World!");    });    it("should never return 'undefined' when called", function() {      expect(helloWorld()).not.toBe(undefined);    });});describe('sayHello',function() {    it('Make It A Function!', function() {        expect(typeof sayHello).toBe('function');    });    it('Return A String!', function(){        expect(typeof sayHello()).toBe("string");    });    it('Does it say "Hello Jane!" ?', function(){        expect(sayHello('Jane')).toBe("Hello, Jane!");    });    // it('CANNOT BE "undefined" OR ELSE...', function(){    //     expect(sayHello()).not.toBe(undefined);    // });    it('Hi to Alex', function(){        expect(sayHello("Alex")).toBe("Hello, Alex!");    })    it('sayHello for Pat!', function(){        expect(sayHello("Pat")).toBe("Hello, Pat!");    })    it('Say Hello World with no input', function(){        expect(sayHello()).toBe("Hello, World!");    });    it('Hello World for False', function(){        expect(sayHello(false)).toBe(`Hello, World!`);    });});describe(`isFive`, function(){    it(`is a function`, function(){        expect(typeof isFive).toBe(`function`);    });    it(`should always return a boolean value`, function(){        expect(typeof(isFive(true))).toBe('boolean');    });    it(`should true for 5`, function(){        expect(isFive(5)).toBe(true);    });})describe(`isEven`, function(){    it(`should return type as function`, function(){        expect(typeof isEven).toBe('function');    });    it(`should return a boolean value`, function(){        expect(isEven(1)).toBe(false);    });    it(`should return true with input of 2`, function(){        expect(isEven(2)).toBe(true);    });    it(`should return true with input of -4`, function(){        expect(isEven(-4)).toBe(true);    });    it(`should return false with input of 3`, function(){        expect(isEven(3)).toBe(false);    });    it(`should return false with input of banana`, function(){        expect(isEven('banana')).toBe(false);    });    it(`should return true with input of 8`, function(){        expect(isEven(8)).toBe(true);    });    it(`should return false with input of infinity`, function() {        expect(isEven(Infinity)).toBe(false);    });    it(`should return false with input of boolean value`, function() {        expect(isEven(false)).toBe(false);    });    it(`should return false with  no input`, function() {        expect(isEven()).toBe(false);    });});describe('isVowel', function(){    it(`is a function`, function(){        expect(typeof isVowel).toBe(`function`);    });    it(`is always returning a boolean value`, function(){        expect(isVowel(true)).toBe(false);    });    it('a returns true', function(){        expect(isVowel('a')).toBe(true);    });    it('A returns true', function(){        expect(isVowel('A')).toBe(true);    });    it('y returns false', function(){        expect(isVowel('y')).toBe(false);    });    it('4 returns false', function(){        expect(isVowel('4')).toBe(false);    });    it('true returns false', function(){        expect(isVowel(true)).toBe(false)    });    it('false returns false', function(){        expect(isVowel(false)).toBe(false)    });    it('banana returns false', function(){        expect(isVowel("banana")).toBe(false)    });    it('empty returns false', function(){        expect(isVowel()).toBe(false)    });});describe(`add`, function(){    it(`should be a function`, function(){        expect(typeof add).toBe(`function`);    });    it(`should take 2 and 3 to return 5`, function() {        expect(add(2, 3)).toBe(5);    });    it(`should take -3 and -9 to return -12`, function() {        expect(add(-3, -9)).toBe(-12);    });    it(`should take "5" and 6 to return 11`, function() {        expect(add("5", 6)).toBe(11);    });    it(`should take "-4" and "10" to return 6`, function() {        expect(add("-4", "10")).toBe(6);    });    it(`should take "banana" and "split" to return NaN`, function() {        expect(add("banana", "split")).not.toBe(NaN);    });    it(`should take 2 and "apples" to return NaN`, function() {        expect(add(2, "apples")).not.toBe(NaN);    });    it(`should output NaN with no inputs`, function() {        expect(add()).not.toBe(NaN);    });});